name: Multiple Jobs Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write    

jobs:
  test:
    timeout-minutes: 100
    runs-on: ubuntu-latest-16-core-internal
    strategy:
      matrix:
        group: [
          { file: 'Playwright-Automation/tests/cf_AutoTest/bscdownpayment/01_BSC-Silver-Lockdown-SC-NB.spec.ts', name: 'BSC Silver New Business Group 1' },
          { file: 'Playwright-Automation/tests/cf_AutoTest/bscdownpayment/02_BSC-Bronze-Lockdown-SC-NB.spec.ts', name: 'BSC Bronze New Business Group 2' },
        ]

    name: ${{ matrix.group.name }}
    env:
      CI: true

    steps:
    - uses: actions/checkout@v4

    - uses: lmigtech/internal-actions/actions/setup-node@v0
      with:
        node-version: "20"
        cache: "npm"
        cache-dependency-path: "**/package-lock.json"
        working-directory: ./Playwright-Automation

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      working-directory: ./Playwright-Automation

    - name: Install Additional Dependencies(ffmpeg and xvfb)
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg xvfb
      shell: bash

    - name: Start Xvfb(Virtual Display)
      run: |
        Xvfb :99 -screen 0 1920x1080x24 -ac -nolisten tcp &
        sleep 3
      shell: bash

    - name: Start screen recording with ffmpeg
      run: |
        ffmpeg -y -f x11grab -video_size 1920x1080 -i :99 -r 30 -c:v libx264 -preset ultrafast -pix_fmt yuv420p test_execution.mp4 &
        sleep 2
      shell: bash

    - name: Run Playwright Tests
      id: run_tests
      run: |
        set -o pipefail
        EXIT_CODE=0
        DISPLAY=:99 npx playwright test ${{ matrix.group.file }} --project="Google Chrome" --workers=1 --headed 2>&1 | tee test_output.txt || EXIT_CODE=$?
        echo "Test exit code: $EXIT_CODE"
        echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
        exit $EXIT_CODE
      working-directory: ./Playwright-Automation
      continue-on-error: true

    - name: Stop screen recording
      if: always()
      run: |
        if pgrep ffmpeg; then
          pkill ffmpeg
          sleep 3
        fi
      shell: bash

    - name: Ensure Video Exists
      if: always()
      run: |
        if [ ! -f test_execution.mp4 ]; then
          echo "WARNING: test_execution.mp4 was not created."
        fi
      shell: bash

    # ðŸ”„ updated: use unique artifact names for each matrix group
    - name: Upload individual test execution video
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Test-Videos-${{ matrix.group.name }}  # ðŸ”„
        path: ./Playwright-Automation/test-results/**/*.webm
        retention-days: 1 

    - name: Upload full test execution video
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Full-Video-${{ matrix.group.name }}  # ðŸ”„
        path: test_execution.mp4
        retention-days: 1 

    - name: Upload Screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Screenshots-${{ matrix.group.name }}  # ðŸ”„
        path: ./Playwright-Automation/test-results/**/*.png
        retention-days: 1

    - name: Upload Monocart report
      if: always()  # ðŸ”„ changed from if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: Monocart-${{ matrix.group.name }}  # ðŸ”„
        path: ./Playwright-Automation/monocart-report
        retention-days: 15

    - name: Final Check: Fail Job if Tests Failed
      if: always()
      run: |
        echo "Captured exit code: ${{ steps.run_tests.outputs.exit-code }}"
        if [ "${{ steps.run_tests.outputs.exit-code }}" -ne 0 ]; then
          echo "Some tests failed. Failing job."
          exit 1
        else
          echo "All tests passed."
        fi
      shell: bash

  # ðŸ†• added: aggregate job
  aggregate:
    name: Aggregate All Artifacts
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./all-artifacts  # ðŸ†•

    - name: List all downloaded files
      run: |
        echo "Downloaded files:"
        find ./all-artifacts  # ðŸ†•

    - name: Zip all results
      run: |
        zip -r Final-Report.zip ./all-artifacts  # ðŸ†•

    - name: Upload Final Report
      uses: actions/upload-artifact@v4
      with:
        name: Final-Combined-Report
        path: Final-Report.zip
        retention-days: 15  # ðŸ†•
