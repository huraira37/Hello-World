name: Multiple Jobs Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # schedule:
  #   - cron: '30 13 * * 5'  

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write    

jobs:
  test:
    timeout-minutes: 100
    runs-on: ubuntu-latest-16-core-internal
    strategy:
      matrix:
        group: [
          # { file: 'Playwright-Automation/tests/cf_AutoTest/bscdownpayment/01_BSC-Silver-Lockdown-SC-NB.spec.ts', name: 'BSC Silver New Business Group 1' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/bscdownpayment/02_BSC-Bronze-Lockdown-SC-NB.spec.ts', name: 'BSC Bronze New Business Group 2' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/bscdownpayment/03_BSC-Gold-Lockdown-SC-NB.spec.ts', name: 'BSC Gold New Business Group 3' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/foreignDriversLicense/CFA_Auto_FDL-CF1-NB.spec.ts', name: 'FDL CF1 New Business Group 4' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/foreignDriversLicense/CFA_Auto_FDL-CF2-NB.spec.ts', name: 'FDL CF2 New Business Group 5' },
          { file: 'Playwright-Automation/tests/cf_AutoTest/restrictedOperator/Restrict_Operator_Tests.spec.ts', name: 'Restrict Operator Tests Group 6' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/tiktok_theft/CFA_Auto-TikTok-theft.spec.ts', name: 'TikTok Theft Tests Group 7' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/unbindableVehicles/Cost_New_Unbind Vehs.spec.ts', name: 'Cost New Unbindable Vehicles Tests Group 8' },
          # { file: 'Playwright-Automation/tests/cf_PropertyTest/Aerial Runway Pause/CFP_Property_Aerial_Runway_Pause.spec.ts', name: 'Aerial Runway Pause Tests Group 9' },
          { file: 'Playwright-Automation/tests/cf_PropertyTest/inspectionScoreCard/inspectionScoreCard.spec.ts', name: 'Inspection ScoreCard Tests Group 10' },
          # { file: 'Playwright-Automation/tests/cf_PropertyTest/NH_Pause/CFP Property_NH-Pause.ts', name: 'NH_PC9-PC10_Pause Tests Group 11' },
        ]

    name: ${{ matrix.group.name }}
    env:
      CI: true

    steps:
    - uses: actions/checkout@v4

    - uses: lmigtech/internal-actions/actions/setup-node@v0
      with:
        node-version: "20"
        cache: "npm"
        cache-dependency-path: "**/package-lock.json"
        working-directory: ./Playwright-Automation

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      working-directory: ./Playwright-Automation

    - name: Install Additional Dependencies (ffmpeg and xvfb)
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg xvfb
      shell: bash

    - name: Install ffmpeg for screen recording
      run: sudo apt-get install ffmpeg -y

    - name: Start Xvfb (Virtual Display)
      run: |
        Xvfb :99 -screen 0 1920x1080x24 -ac -nolisten tcp &
        sleep 3
      shell: bash

    - name: Start screen recording with ffmpeg
      run: |
        ffmpeg -y -f x11grab -video_size 1920x1080 -i :99 -r 30 -c:v libx264 -preset ultrafast -pix_fmt yuv420p test_execution.mp4 &
        sleep 2
      shell: bash

    - name: Run Playwright Tests
      id: run_tests
      run: |
        set -o pipefail
        EXIT_CODE=0
        DISPLAY=:99 npx playwright test ${{ matrix.group.file }} --project="Google Chrome" --workers=1 --headed 2>&1 | tee test_output.txt || EXIT_CODE=$?
        echo "Test exit code: $EXIT_CODE"
        echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
        exit $EXIT_CODE
      working-directory: ./Playwright-Automation
      continue-on-error: true

    - name: Stop screen recording
      if: always()
      run: |
        if pgrep ffmpeg; then
          echo "Stop screen recording..."
          pkill ffmpeg
          sleep 3
        else
          echo "WARNING: ffmpeg was not running!"
        fi
      shell: bash

    - name: Ensure Video Exists
      if: always()
      run: |
        if [ ! -f test_execution.mp4 ]; then
          echo "ERROR: test_execution.mp4 was not created!"
          exit 1
        fi
      shell: bash

    - name: Upload individual test execution video
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Test-Videos-${{ matrix.group.name }}
        path: ./Playwright-Automation/test-results/**/*.webm
        retention-days: 1 

    - name: Upload full test execution video
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Full-Video-${{ matrix.group.name }}
        path: test_execution.mp4
        retention-days: 1 

    - name: Upload Screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Screenshots-${{ matrix.group.name }}
        path: ./Playwright-Automation/test-results/**/*.png
        retention-days: 1

    # ✅ Generate Monocart report after Playwright tests
    - name: Generate Monocart Report
      run: |
        npx monocart-reporter generate ./test-results --output ./monocart-report
      working-directory: ./Playwright-Automation

    # ✅ Check if Monocart report exists before uploading
    - name: Check Monocart Report
      if: always()
      run: |
        if [ -f ./Playwright-Automation/monocart-report/index.json ]; then
          echo "✅ Report ready to upload."
        else
          echo "❌ Report missing. Skipping upload."
          exit 1
        fi

    # ✅ Upload Monocart report
    - name: Upload Monocart Report
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: Monocart-${{ matrix.group.name }}
        path: ./Playwright-Automation/monocart-report
        retention-days: 15

    - name: Final Check: Fail Job if Tests Failed
      if: always()
      run: |
        echo "Captured exit code: ${{ steps.run_tests.outputs.exit-code }}"
        if [ "${{ steps.run_tests.outputs.exit-code }}" -ne 0 ]; then
          echo "Some tests failed. Failing job."
          exit 1
        else
          echo "All tests passed."
        fi
      shell: bash

  aggregate:
    name: Aggregate All Artifacts
    runs-on: ubuntu-latest-16-core-internal
    needs: test
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./all-artifacts

    - name: List all downloaded files
      run: |
        echo "Downloaded files:"
        find ./all-artifacts

    - name: Zip all results
      run: |
        zip -r Final-Report.zip ./all-artifacts

    - name: Upload Final Report
      uses: actions/upload-artifact@v4
      with:
        name: Final-Combined-Report
        path: Final-Report.zip
        retention-days: 15  

  merge-reports:
    needs: test
    runs-on: ubuntu-latest-16-core-internal
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-cache

    - name: Set npm registry to Cloudflare mirror (to avoid E503)
      run: npm config set registry https://registry.npmmirror.com/

    - name: Install dependencies
      run: npm ci
      working-directory: ./Playwright-Automation

    - name: Merge Monocart reports using monocart-reporter
      run: node merge-monocart.mjs
      working-directory: ./Playwright-Automation

    - name: Debug: List merged report directory
      run: |
        echo "Checking contents of merged-report:"
        ls -R merged-report || echo "merged-report folder not found"

    - name: Upload merged report
      uses: actions/upload-artifact@v4
      with:
        name: merged-report
        path: merged-report
