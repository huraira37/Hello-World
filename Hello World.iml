name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '30 14 * * 5'  

permissions:
      contents: read
      id-token: write
      pull-requests: write
      issues: write    
jobs:
  test:
    timeout-minutes: 100
    runs-on: ubuntu-latest-internal
    env:
      CI: true
    steps:
    - uses: actions/checkout@v4
    - uses: lmigtech/internal-actions/actions/setup-node@v0
      with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
          working-directory: ./Playwright-Automation

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      working-directory: ./Playwright-Automation

    - name: Install Additional Dependencies(ffmpeg and xvfb)
      run: |
       sudo apt-get update
       sudo apt-get install -y ffmpeg xvfb
      shell: bash

      #install ffmpeg for screen recording
    - name: Install ffmpeg for screen recoding
      run: sudo apt-get install ffmpeg -y

      #start virtual display (xvfb) for headless browser
    - name: Start Xvfb(Virtual Display)
      run: |
        Xvfb :99 -screen 0 1920x1080x24 -ac -nolisten tcp &
        sleep 3 #Allow time for Xvfb to fully start
      shell: bash

      #Start recording the entire test execution
    - name: Start screen recording with ffmpeg
      run: |
        ffmpeg -y -f x11grab -video_size 1920x1080 -i :99 -r 30 -c:v libx264 -preset ultrafast -pix_fmt yuv420p test_execution.mp4 &
        sleep 2
      shell: bash

       #run playwright tests
    - name: Run Playwright Tests
      id: run_tests
      run: |
       # Ensure pipefail is set so the exit status of the first command in a pipeline is used.
       set -o pipefail
       EXIT_CODE=0
       # Run the tests. If npx playwright test exist nonzero, capture its exit code.
       DISPLAY=:99 npx playwright test --project="Google Chrome" --workers=1 --headed --grep-invert "@wip" 2>&1 | tee test_output.txt || EXIT_CODE=$?
       echo "Test exit code: $EXIT_CODE"
       # Set the exit code as a workflow output
       echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
       # Exit with the captured code (this step is marked continue-on-error so subsequent steps run)
       exit $EXIT_CODE
      working-directory: ./Playwright-Automation
      continue-on-error: true

      #stop screen recording after tests complete
    - name: Stop screen recording
      if: always()
      run: |
       if pgrep ffmpeg; then
        echo "Stop screen recording..."
        pkill ffmpeg
        sleep 3 # Allow ffmpeg to finalize the file
       else
        echo "WARNING: ffmpeg was not running!"
        cat ffmpeg_log.txt
       fi
      shell: bash

      #Ensure video file was created
    - name: Ensure Video Exists
      if: always()
      run: |
       if [ ! -f test_execution.mp4 ]; then
        echo "ERROR: test_execution.mp4 was not created!"
        exit 1
       fi
      shell: bash

      #Upload individual test videos (Deletes after 1 days)
    - name: Upload individual test execution video
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Playwright-Test-Videos
        path: ./Playwright-Automation/test-results/**/*.webm
        retention-days: 1 
      
      #Upload the full test execution screen recording (deletes after 1 days) 
    - name: Upload full test execution video
      uses: actions/upload-artifact@v4
      with:
        name: Full-Test-Execution
        path: test_execution.mp4
        retention-days: 1 

      #Optionally, upload screenshots if any tests failed
    - name: Upload Screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Screenshots
        path: ./Playwright-Automation/test-results/**/*.png
        retention-days: 1

      #upload Monocart report (keeps for 15 days)
    - name: Upload Monocart report  
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: ./Playwright-Automation/monocart-report
        retention-days: 15
      
      # Final check: fail the job if any tests failed
    - name: "Final Check: Fail Job if Tests Failed"
      if: always()
      run: |
        echo "Captured exit code: ${{ steps.run_tests.outputs.exit-code }}"
        if [ "${{ steps.run_tests.outputs.exit-code }}" -ne 0 ]; then
          echo "Some tests failed. Failing job."
          exit 1
        else
         echo "All tests passed."
        fi
      shell: bash
