* Actually I want to merger the report from my all job and aggregate artifact. but getting error:

Sharing Complete YAML:

name: Multiple Jobs Test
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # schedule:
  #   - cron: '30 13 * * 5'  

permissions:
      contents: read
      id-token: write
      pull-requests: write
      issues: write    
jobs:
  test:
    timeout-minutes: 100
    runs-on: ubuntu-latest-16-core-internal
    strategy:
      matrix:
        group: [
          # { file: 'Playwright-Automation/tests/cf_AutoTest/bscdownpayment/01_BSC-Silver-Lockdown-SC-NB.spec.ts', name: 'BSC Silver New Business Group 1' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/bscdownpayment/02_BSC-Bronze-Lockdown-SC-NB.spec.ts', name: 'BSC Bronze New Business Group 2' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/bscdownpayment/03_BSC-Gold-Lockdown-SC-NB.spec.ts', name: 'BSC Gold New Business Group 3' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/foreignDriversLicense/CFA_Auto_FDL-CF1-NB.spec.ts', name: 'FDL CF1 New Business Group 4' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/foreignDriversLicense/CFA_Auto_FDL-CF2-NB.spec.ts', name: 'FDL CF2 New Business Group 5' },
          { file: 'Playwright-Automation/tests/cf_AutoTest/restrictedOperator/Restrict_Operator_Tests.spec.ts', name: 'Restrict Operator Tests Group 6' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/tiktok_theft/CFA_Auto-TikTok-theft.spec.ts', name: 'TikTok Theft Tests Group 7' },
          # { file: 'Playwright-Automation/tests/cf_AutoTest/unbindableVehicles/Cost_New_Unbind Vehs.spec.ts', name: 'Cost New Unbindable Vehicles Tests Group 8' },
          # { file: 'Playwright-Automation/tests/cf_PropertyTest/Aerial Runway Pause/CFP_Property_Aerial_Runway_Pause.spec.ts', name: 'Aerial Runway Pause Tests Group 9' },
          { file: 'Playwright-Automation/tests/cf_PropertyTest/inspectionScoreCard/inspectionScoreCard.spec.ts', name: 'Inspection ScoreCard Tests Group 10' },
          # { file: 'Playwright-Automation/tests/cf_PropertyTest/NH_Pause/CFP Property_NH-Pause.ts', name: 'NH_PC9-PC10_Pause Tests Group 11' },
          ]

    name: ${{ matrix.group.name }}  # Custom job name
    env:
      CI: true
    steps:
    - uses: actions/checkout@v4
    - uses: lmigtech/internal-actions/actions/setup-node@v0
      with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
          working-directory: ./Playwright-Automation

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      working-directory: ./Playwright-Automation

    - name: Install Additional Dependencies(ffmpeg and xvfb)
      run: |
       sudo apt-get update
       sudo apt-get install -y ffmpeg xvfb
      shell: bash

      #install ffmpeg for screen recording
    - name: Install ffmpeg for screen recoding
      run: sudo apt-get install ffmpeg -y

      #start virtual display (xvfb) for headless browser
    - name: Start Xvfb(Virtual Display)
      run: |
        Xvfb :99 -screen 0 1920x1080x24 -ac -nolisten tcp &
        sleep 3 #Allow time for Xvfb to fully start
      shell: bash

      #Start recording the entire test execution
    - name: Start screen recording with ffmpeg
      run: |
        ffmpeg -y -f x11grab -video_size 1920x1080 -i :99 -r 30 -c:v libx264 -preset ultrafast -pix_fmt yuv420p test_execution.mp4 &
        sleep 2
      shell: bash

       #run playwright tests
    - name: Run Playwright Tests
      id: run_tests
      run: |
        # Ensure pipefail is set so the exit status of the first command in a pipeline is used.
        set -o pipefail
        EXIT_CODE=0
        # Run the tests. If npx playwright test exist nonzero, capture its exit code.
        DISPLAY=:99 npx playwright test ${{ matrix.group.file }} --project="Google Chrome" --workers=1 --headed 2>&1 | tee test_output.txt || EXIT_CODE=$?
        echo "Test exit code: $EXIT_CODE"
        # Set the exit code as a workflow output
        echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
        # Exit with the captured code (this step is marked continue-on-error so subsequent steps run)
        exit $EXIT_CODE
        # Check for flaky tests in the report
           if grep -q '"status": "flaky"' report.json; then
             echo "Flaky tests detected in ${{ matrix.group.file }}."
             exit 1
           fi
           # Exit with the original exit code if no flaky tests were found
           exit $exit_code
      working-directory: ./Playwright-Automation
      continue-on-error: true
 

      #stop screen recording after tests complete
    - name: Stop screen recording
      if: always()
      run: |
       if pgrep ffmpeg; then
        echo "Stop screen recording..."
        pkill ffmpeg
        sleep 3 # Allow ffmpeg to finalize the file
       else
        echo "WARNING: ffmpeg was not running!"
        cat ffmpeg_log.txt
       fi
      shell: bash

      #Ensure video file was created
    - name: Ensure Video Exists
      if: always()
      run: |
       if [ ! -f test_execution.mp4 ]; then
        echo "ERROR: test_execution.mp4 was not created!"
        exit 1
       fi
      shell: bash

      #Upload individual test videos (Deletes after 1 days)
    - name: Upload individual test execution video
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Test-Videos-${{ matrix.group.name }} 
        path: ./Playwright-Automation/test-results/**/*.webm
        retention-days: 1 
      
      #Upload the full test execution screen recording (deletes after 1 days) 
    - name: Upload full test execution video
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Full-Video-${{ matrix.group.name }} 
        path: test_execution.mp4
        retention-days: 1 

      #Optionally, upload screenshots if any tests failed
    - name: Upload Screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Screenshots-${{ matrix.group.name }}  
        path: ./Playwright-Automation/test-results/**/*.png
        retention-days: 1

      #upload Monocart report (keeps for 15 days)
    - name: Upload Monocart report
      if: always() # changed from if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: Monocart-${{ matrix.group.name }}  
        path: ./Playwright-Automation/monocart-report
        retention-days: 15

      
      # Final check: fail the job if any tests failed
    - name: "Final Check: Fail Job if Tests Failed"
      if: always()
      run: |
        echo "Captured exit code: ${{ steps.run_tests.outputs.exit-code }}"
        if [ "${{ steps.run_tests.outputs.exit-code }}" -ne 0 ]; then
          echo "Some tests failed. Failing job."
          exit 1
        else
         echo "All tests passed."
        fi
      shell: bash

      # added: aggregate job
  aggregate:
    
    name: Aggregate All Artifacts
    runs-on: ubuntu-latest-16-core-internal
    needs: test
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./all-artifacts  

    - name: List all downloaded files
      run: |
          echo "Downloaded files:"
          find ./all-artifacts   
  
    

  merge-reports: 
    needs: test 
    runs-on: ubuntu-latest-16-core-internal
    steps: 
    - name: Download all test results 
      uses: actions/download-artifact@v4 
      with: 
        path: results

    - name: Merge Monocart reports
      run: npm config set strict-ssl false
 

    - name: Merge Monocart reports
      run: |
          npx monocart merge ./all-artifacts/**/index.json -o results/merged-report.json
        
          - name: Generate Monocart report
            run: |
              npx monocart merge results/merged-report.json -o merged-report.html
        
          - name: Upload merged report
            uses: actions/upload-artifact@v4
            with:
              name: merged-report
              path: merged-report       

    
*getting error:

under merge Monocart Report:
Run npx monocart merge ./all-artifacts/**/index.json -o results/merged-report.json
  
npm error code E503
npm error 503 Service Unavailable - GET https://registry.npmjs.org/monocart
npm error A complete log of this run can be found in: /home/runner/.npm/_logs/2025-03-28T18_12_39_628Z-debug-0.log
Error: Process completed with exit code 1.

when I clicked on this link:GET https://registry.npmjs.org/monocart
it's showing like that: 
{"_id":"monocart","_rev":"7-bb5a25584fcdc610dd087ae0b3d9055f","name":"monocart","description":"Web UI automation test tool based on playwright","dist-tags":{"latest":"1.1.3"},"versions":{"1.0.0":{"name":"monocart","version":"1.0.0","_id":"monocart@1.0.0","maintainers":[{"name":"cenfun","email":"cenfun@qq.com"}],"bin":{"monocart":"lib/cli.js"},"dist":{"shasum":"c0c292672cd70d354e88ce6204c01824f3552824","tarball":"https://registry.npmjs.org/monocart/-/monocart-

*please solve the issue and highlight where you will update it? 
