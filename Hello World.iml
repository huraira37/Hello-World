public async additionalInfoValidation(additionalRunwayAlphaInfo: string, rateStatus: string) {
    try {
        this.logger.log("Checking for the additional info popup...");

        // Wait for popup, handle timeout gracefully
        const popupVisible = await this.additionalPopUp.isVisible({ timeout: 5000 });

        if (popupVisible) {
            this.logger.log("Popup appeared.");

            await this.additionalPopUp.waitFor({ state: 'visible', timeout: 10000 });
            await expect(this.additionalPopUp).toContainText("Additional Information Review Validation");

            await this.additionalRunwayAlphaInfo.waitFor({ state: 'visible', timeout: 5000 });
            await this.additionalRunwayAlphaInfo.selectOption(additionalRunwayAlphaInfo);
            this.logger.log(`Selected Additional Runway Alpha Info: ${additionalRunwayAlphaInfo}`);

            await this.submitDecision.waitFor({ state: 'visible', timeout: 5000 });
            await this.submitDecision.click();
            this.logger.log("Clicked on Submit Decision button");

            await this.page.waitForLoadState('domcontentloaded');
        } else {
            this.logger.log("Popup did not appear, proceeding without it.");
        }

        // Common steps after popup (or its absence)
        await this.reRateButton.waitFor({ state: 'visible', timeout: 5000 });
        await this.reRateButton.click();
        this.logger.log("Clicked Re-Rate button");

        await this.rateStatusValid.waitFor({ state: 'visible', timeout: 10000 });
        await expect(this.rateStatusValid).toContainText(rateStatus);
        this.logger.log(`Validated Rate Status: ${rateStatus}`);

        await this.headerNext.waitFor({ state: 'visible', timeout: 5000 });
        await this.headerNext.click();
        this.logger.log("Clicked Next button");

    } catch (error) {
        this.logger.error(`Error during Additional Info Validation: ${error}`);
        throw error; // Optional: Rethrow if you want the test to fail
    }
}
